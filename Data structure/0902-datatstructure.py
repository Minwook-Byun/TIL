# 인터프리터 방식이며, 문법이 쉽고 코드를 보면 직관적으로 알 수 있는 부분이 많다. 
# 리터럴과 자료형 -- mutable:자료형에 있는 요소를 수정할 수 있는 것. 
import keyword
print(keyword.kwlist) #변화는 있지만 제어구조에 있는 것은 변하지 않는다 

#typeFunc.py 

print(type('Hello Python'))
print(type(1234)) 

#====상수(Literal)=== 어떠한 값 자체. 프로그램이 수행되면서 변경할 필요가 없는 값
#내장 상수: 시스템에서 정한 값
#파이썬은 symbolic literal을 사용하지 않는다. (class로 만들 수는 있다.)
#변수명이 대문자인 것은 일반 변수와 구분하기 위한 것으로, 상수를 선언하는 것은 단지 편의를 위한 것이다. 

#===식별자===
#의미있는 단어로 할 것 (스네이크 케이스, 캐멀케이스)
#class이름: 대문자로 시작 
#변수, 함수, 모듈이름: 소문자로 시작 

#===변수===
#선언 없이 사용할 수 있다. 
#파이썬의 변수는 dynamic typing => 변수의 자료형은 할당되는 값의 자료형에 의해 결정된다. 

number = 132 #변수 생성 및 사용 문장 

#파이썬에서는 모든 자료가 클래스로부터 만들어진 객체이다.
#변수는 다른 객체를 참조하는 참조자 또는 포인터 역할을 한다. 
#메모리 어딘가에 132를 저장해놓고(주소가 1024) number라는 변수가 이 주소를(1024) 가리키는 것이다. (pointer) 

number = 99

#위에 연결이 끊어지고 다시 99를 가리킨다. 
#표현식 => 문장 => 프로그램 
#l-value는 항상 변수여야만 한다. 

#===함수 호출과 입출력 함수===
a = 1
b = 2 
y = sum(a, b) #a,b는 인수 , 매개변수는 함수 호출할 때 수는 것이고 인수argument는 함수 호출할 때 사용
print("game over") #""로 묶였으니, 인수는 한 개 
print("game", end=" ") #줄바꿈하지 말고 한 칸 띄우는 것만 

#===제어 구조와 반복===
#순차(sequential), 분기(true, False(0만 거짓이고 나머지 모두 참이다!)), 반복(loop) 
#무한반복 : the loops runs forever , 발생이유: 조건식 결과가 언젠가는 false가 되어야 하는데 그렇지 않음. 강제종료 ctrl+c 

# off by one error 의도한 논리보다 한 번 더 실행이 되는 경우 
cnt = 1 
while cnt <= 10:
    if cnt > 5:
        print("stop")
    break
print("number is %d" %cnt)
cnt = cnt + 1 